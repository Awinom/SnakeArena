// core/AchievementManager.js
export default class AchievementManager {
    constructor(game) {
        this.game = game;
        this.achievements = new Map();
        this.unlockedAchievements = new Set();
        this.loadAchievements();
        this.setupAchievements();
    }

    setupAchievements() {

        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        this.achievements.clear();

        // –ë–∞–∑–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ 5 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö)
        const achievementDefinitions = [
            {
                id: 'first_blood',
                name: '–ü–µ—Ä–≤—ã–π —Å–æ–∫',
                description: '–°—ä–µ—Å—Ç—å –ø–µ—Ä–≤—É—é –µ–¥—É',
                icon: 'üçé',
                condition: (game) => game.scenes.game.score > 0
            },
            {
                id: 'snake_growth',
                name: '–î–ª–∏–Ω–Ω—é—â–∏–π',
                description: '–î–æ—Å—Ç–∏—á—å –¥–ª–∏–Ω—ã –∑–º–µ–π–∫–∏ –≤ 50 —Å–µ–≥–º–µ–Ω—Ç–æ–≤',
                icon: 'üêç',
                condition: (game) => game.scenes.game.snake.body.length >= 50
            },
            {
                id: 'sharpshooter',
                name: '–í —è–±–ª–æ—á–∫–æ',
                description: '–ü–æ–ø–∞—Å—Ç—å —Å–Ω–∞—Ä—è–¥–æ–º –≤ –µ–¥—É 10 —Ä–∞–∑',
                icon: 'üéØ',
                condition: (game) => {
                    // –î–æ–±–∞–≤–∏–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø–∞–¥–∞–Ω–∏–π –≤ GameScene
                    return game.scenes.game.projectilesHit >= 10;
                }
            },
            {
                id: 'survivor',
                name: '–í—ã–∂–∏–≤—à–∏–π',
                description: '–ü—Ä–æ–∂–∏—Ç—å 100 —Å–µ–∫—É–Ω–¥ –±–µ–∑ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π',
                icon: '‚è±Ô∏è',
                condition: (game) => game.scenes.game.survivalTime >= 100
            },
            {
                id: 'combo_master',
                name: '–Ø—Ä–æ—Å—Ç—å –ë–æ–≥–æ–≤',
                description: '–°—ä–µ—Å—Ç—å 3 —è–±–ª–æ–∫–∞ –∑–∞ 1 —Å–µ–∫—É–Ω–¥—É',
                icon: 'üî•',
                condition: (game) => game.scenes.game.maxCombo >= 3
            },
            {
                id: 'canibal',
                name: '–ì–∞–Ω–Ω–∏–±–∞–ª',
                description: '–°—ä–µ—Å—Ç—å 10 —Å–µ–≥–º–µ–Ω—Ç–æ–≤ —Å–µ–±—è',
                icon: 'üç¥',
                condition: (game) => game.scenes.game.canibal >= 10
            },
            {
                id: 'vinner',
                name: '–Æ–≤–µ–ª–∏—Ä',
                description: '–ó–∞–ø–æ–ª–Ω–∏ —Å–≤–æ–∏–º –∑–º–µ–µ–º –≤—Å–µ –∫–ª–µ—Ç–∫–∏',
                icon: 'üßí',
                condition: (game) => game.scenes.game.isVinner >= 1
            },
            {
                id: 'samurai',
                name: '–°–∞–º—É—Ä–∞–π',
                description: '–£–±–µ–π —Å–µ–±—è –≤—ã—Å—Ç—Ä–µ–ª–æ–º 10 —Ä–∞–∑',
                icon: 'üë∫',
                condition: (game) => game.scenes.game.HeadShoot >= 10
            }
        ];

        // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ Map
        achievementDefinitions.forEach(achievement => {
            this.addAchievement(achievement);
        });
    }

    addAchievement(achievement) {
        this.achievements.set(achievement.id, {
            ...achievement,
            unlocked: false,
            unlockedAt: null
        });
    }

    loadAchievements() {
        try {
            const saved = localStorage.getItem('snake_achievements');
            if (saved) {
                const data = JSON.parse(saved);
                this.unlockedAchievements = new Set(data.unlocked || []);

                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ achievements
                this.achievements.forEach((achievement, id) => {
                    if (this.unlockedAchievements.has(id)) {
                        achievement.unlocked = true;
                        achievement.unlockedAt = data.unlockedAt?.[id] || null;
                    }
                });
            }
        } catch (e) {
            console.error('Error loading achievements:', e);
        }
    }

    saveAchievements() {
        try {
            const unlockedAt = {};
            this.achievements.forEach((achievement, id) => {
                if (achievement.unlocked) {
                    unlockedAt[id] = achievement.unlockedAt;
                }
            });

            const data = {
                unlocked: Array.from(this.unlockedAchievements),
                unlockedAt: unlockedAt,
                timestamp: Date.now()
            };
            localStorage.setItem('snake_achievements', JSON.stringify(data));
        } catch (e) {
            console.error('Error saving achievements:', e);
        }
    }

    checkAchievements() {
        let unlockedCount = 0;
        
        this.achievements.forEach((achievement, id) => {
            if (!achievement.unlocked) {
                try {
                    if (achievement.condition(this.game)) {
                        this.unlockAchievement(id);
                        unlockedCount++;
                    }
                } catch (error) {
                    console.error(`Error checking achievement ${id}:`, error);
                }
            }
        });

        return unlockedCount;
    }

    unlockAchievement(id) {
        if (this.unlockedAchievements.has(id)) return;

        const achievement = this.achievements.get(id);
        if (achievement) {
            achievement.unlocked = true;
            achievement.unlockedAt = Date.now();
            this.unlockedAchievements.add(id);
            this.saveAchievements();
            
            this.showAchievementNotification(achievement);
            //console.log(`Achievement unlocked: ${achievement.name} - ${achievement.description}`);
        }
    }

    showAchievementNotification(achievement) {
        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const notification = document.createElement('div');
        notification.className = 'achievement-notification';
        notification.innerHTML = `
            <div class="achievement-icon">${achievement.icon}</div>
            <div class="achievement-text">
                <div class="achievement-title">–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ!</div>
                <div class="achievement-name">${achievement.name}</div>
                <div class="achievement-desc">${achievement.description}</div>
            </div>
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: rgba(0, 0, 0, 0.9);
            color: white;
            padding: 15px;
            border-radius: 10px;
            border-left: 4px solid #4CAF50;
            display: flex;
            align-items: center;
            gap: 15px;
            z-index: 10000;
            transform: translateX(400px);
            transition: transform 0.3s ease;
            max-width: 300px;
        `;

        document.body.appendChild(notification);

        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        setTimeout(() => {
            notification.style.transform = 'translateX(0)';
        }, 100);

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ
        setTimeout(() => {
            notification.style.transform = 'translateX(400px)';
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 300);
        }, 3000);
    }

    getAchievementProgress(id) {
        const achievement = this.achievements.get(id);
        if (!achievement) return 0;
        
        // –î–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É
        return achievement.unlocked ? 100 : 0;
    }

    getUnlockedAchievements() {
        const unlocked = [];
        this.achievements.forEach((achievement, id) => {
            if (achievement.unlocked) {
                unlocked.push(achievement);
            }
        });
        return unlocked.sort((a, b) => (a.unlockedAt || 0) - (b.unlockedAt || 0));
    }

    getLockedAchievements() {
        const locked = [];
        this.achievements.forEach((achievement, id) => {
            if (!achievement.unlocked) {
                locked.push(achievement);
            }
        });
        return locked.sort((a, b) => a.name.localeCompare(b.name));
    }

    getAllAchievements() {
        const all = [];
        this.achievements.forEach(achievement => {
            all.push(achievement);
        });
        return all.sort((a, b) => {
            // –°–Ω–∞—á–∞–ª–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ, –ø–æ—Ç–æ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
            if (a.unlocked && !b.unlocked) return -1;
            if (!a.unlocked && b.unlocked) return 1;
            // –ó–∞—Ç–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏–ª–∏ –ø–æ –∏–º–µ–Ω–∏
            if (a.unlocked && b.unlocked) {
                return (a.unlockedAt || 0) - (b.unlockedAt || 0);
            }
            return a.name.localeCompare(b.name);
        });
    }
}